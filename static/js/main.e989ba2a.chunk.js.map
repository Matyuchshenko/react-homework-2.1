{"version":3,"sources":["components/Section/Section.js","data/constance.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistic.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","FEEDBACK_OPTIONS","FeedbackOptions","options","onLiveFeedback","map","option","feedback","type","data-feedback","onClick","FeedbackButton","propTypes","PropTypes","arrayOf","string","func","isRequired","Notification","message","Statistics","good","neutral","bed","total","PositivePercentage","App","state","handelFeedback","target","dataset","setState","prevState","countTotalFeedback","countPositivePercentage","Math","round","this","console","log","Statistic","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAWeA,EATC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACI,oCACI,6BAAKD,IACJC,MCNAC,EAAmB,CAAC,OAAQ,UAAW,O,gBCU9CC,EAAkB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,eAClC,OAAOD,EAAQE,KAAI,SAACC,GAAD,OATE,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,SAAUH,EAAqB,EAArBA,eAClC,OACE,wBAAQI,KAAK,SAASC,gBAAeF,EAAUG,QAASN,EAAxD,SACGG,IAOHI,CAAe,CAAEJ,SAAUD,EAAQF,uBAIxBF,IAEfA,EAAgBU,UAAY,CAC1BT,QAASU,IAAUC,QAAQD,IAAUE,QACrCX,eAAgBS,IAAUG,KAAKC,YClBjC,IAEeC,EAFM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCkB3BC,EAjBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACGD,EAAQ,GACP,+BACE,wCAAWH,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,uDAA0BC,EAA1B,UAGO,IAAVD,GAAe,cAAE,EAAF,CAAeL,QAAU,0BC0ChCO,E,4MAjDbC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,eAAiB,YAAiB,IACxBrB,EADuB,EAAbsB,OACUC,QAApBvB,SACR,EAAKwB,UAAS,SAACC,GAAD,sBAAmBzB,EAAWyB,EAAUzB,GAAY,O,EAGpE0B,mBAAqB,WAAO,IAAD,EACM,EAAKN,MACpC,OAFyB,EACjBN,KADiB,EACXC,QADW,EACFC,K,EAIzBW,wBAA0B,WAAO,IACvBb,EAAS,EAAKM,MAAdN,KACFG,EAAQ,EAAKS,qBACnB,OAAOT,EAAQW,KAAKC,MAAOf,EAAOG,EAAS,KAAO,G,uDAG1C,IAAD,EACwBa,KAAKV,MAA5BN,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBC,EAAQa,KAAKJ,qBACbR,EAAqBY,KAAKH,0BAEhC,OADAI,QAAQC,IAAIF,KAAKV,OAEf,gCACE,cAAC,EAAD,CAAS5B,MAAM,wBAAf,SACE,cAAC,EAAD,CACEI,QAASF,EACTG,eAAgBiC,KAAKT,mBAGzB,cAAC,EAAD,CAAS7B,MAAM,aAAf,SACE,cAACyC,EAAD,CACEnB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,a,GA1CdgB,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e989ba2a.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\n\r\nconst Section = ({ title, children }) => {\r\n    return (\r\n        <section>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Section\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.element.isRequired,\r\n}\r\n\r\n","export const FEEDBACK_OPTIONS = ['good', 'neutral', 'bed']","import PropTypes from \"prop-types\";\r\n\r\nconst FeedbackButton = ({ feedback, onLiveFeedback }) => {\r\n  return (\r\n    <button type=\"button\" data-feedback={feedback} onClick={onLiveFeedback}>\r\n      {feedback}\r\n    </button>\r\n  );\r\n};\r\n\r\nconst FeedbackOptions = ({ options, onLiveFeedback }) => {\r\n  return options.map((option) =>\r\n    FeedbackButton({ feedback: option, onLiveFeedback })\r\n  );\r\n};\r\n\r\nexport default FeedbackOptions;\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n  onLiveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\n\r\nexport default Notification;\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\n","// import PropTypes from 'prop-types'\r\nimport Notification from \"../../components/Notification/\";\r\n\r\nconst Statistics = ({ good, neutral, bed, total, PositivePercentage }) => {\r\n  return (\r\n    <>\r\n      {total > 0 && (\r\n        <ul>\r\n          <li>Good: {good}</li>\r\n          <li>Neutral: {neutral}</li>\r\n          <li>Bed: {bed}</li>\r\n          <li>Total: {total}</li>\r\n          <li>Positive Percentage: {PositivePercentage}%</li>\r\n        </ul>\r\n      )}\r\n      {total === 0 && < Notification message = \"No feedback given\" />}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","import { Component } from \"react\";\n\nimport Section from \"./components/Section\";\nimport { FEEDBACK_OPTIONS } from \"./data/constance\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bed: 0,\n  };\n\n  handelFeedback = ({ target }) => {\n    const { feedback } = target.dataset;\n    this.setState((prevState) => ({ [feedback]: prevState[feedback] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bed } = this.state;\n    return good + neutral + bed;\n  };\n\n  countPositivePercentage = () => {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    return total ? Math.round((good / total) * 100) : 0;\n  };\n\n  render() {\n    const { good, neutral, bed } = this.state;\n    const total = this.countTotalFeedback();\n    const PositivePercentage = this.countPositivePercentage();\n    console.log(this.state);\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={FEEDBACK_OPTIONS}\n            onLiveFeedback={this.handelFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bed={bed}\n            total={total}\n            PositivePercentage={PositivePercentage}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}